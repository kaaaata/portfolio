Xiangqi Tech Plan

"Game" Layer (.js)
- the game layer should contain all game logic code.
- code should do very specific game logic related things
- each game instance should be contained in a Game class, which stores board/turn data and has methods to interact with the board/turn

"View" Layer (React components)
- the view layer should contain all code necessary to display the game on the screen.
- should contain as little actual game logic as possible
- necessary components include:
1. <Xiangqi> the container component rendered inside <App> on the /xiangqi route. contains top-level game options such as "new game", "resign", etc. 
2. <Board> the primary game display component. represents the board as an object in component state with 90 (9x10) properties, each one representing a board square like '3-6'. updates component state simultaneously with Game class state. handles player click-and-drag interaction. pieces are placed on an invisible grid.
3. <BoardGridOverlay> an isolated functional stateless & propless css-focused component placed inside <Xiangqi> to render the visible xiangqi board grid, where each piece sits on line intersections.

Sample Flows
Event: User starts game
- <Board> component is mounted with default board setup, then new Game class is instantiated and assigned to this.Game.

Event: User holds down mouse on piece
- <Board> calls "get valid moves" on this.Game, receives said moves, sets highlight state so user can see where he can move. 

Event: User releases mouse to make a move
- <Board> calls "move piece" on this.Game, and simultaneously updates state (should be fast enough to do synchronously)

Event: AI plays vs. AI
- "get valid moves" is called
- some blackbox move-picker function is called to pick the best move
- "move piece" is called
- repeat the three steps above until someone wins.
